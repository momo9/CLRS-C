!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_ONE	tool.h	6;"	d
ARRAY_TREE_H	array_tree.h	2;"	d
ArrayTree	array_tree.h	/^typedef struct ArrayTree {$/;"	s
ArrayTree	array_tree.h	/^} ArrayTree;$/;"	t	typeref:struct:ArrayTree
ArrayTree::tree	array_tree.h	/^  TypeTreeVal tree[TREE_SIZE];$/;"	m	struct:ArrayTree	access:public
ArrayTree::valid	array_tree.h	/^  char valid[TREE_SIZE];$/;"	m	struct:ArrayTree	access:public
OBJECTS	makefile	/^OBJECTS = $(TAR_OBJ) tree_node.o ptr_tree.o$/;"	m
PTR_TREE_H	ptr_tree.h	2;"	d
PUTD	tool.h	4;"	d
PUTDLN	tool.h	5;"	d
Pshr	tree_node.h	/^  typedef std::tr1::shared_ptr<TreeNode> Pshr;$/;"	t	class:TreeNode	access:public
PtrTree	ptr_tree.cpp	/^PtrTree::PtrTree(TreeNode::TypeVal val)$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val)
PtrTree	ptr_tree.h	/^  PtrTree(TreeNode::TypeVal val);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val)
PtrTree	ptr_tree.h	/^class PtrTree {$/;"	c
PtrTree::PtrTree	ptr_tree.cpp	/^PtrTree::PtrTree(TreeNode::TypeVal val)$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val)
PtrTree::PtrTree	ptr_tree.h	/^  PtrTree(TreeNode::TypeVal val);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val)
PtrTree::findMax	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::findMax(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::findMax	ptr_tree.h	/^  TreeNode::Pshr findMax(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::findMin	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::findMin(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::findMin	ptr_tree.h	/^  TreeNode::Pshr findMin(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::insert	ptr_tree.cpp	/^void PtrTree::insert(TreeNode::TypeVal val) {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val)
PtrTree::insert	ptr_tree.h	/^  void insert(TreeNode::TypeVal val);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val)
PtrTree::insertReal	ptr_tree.cpp	/^void PtrTree::insertReal(TreeNode::TypeVal val, TreeNode::Pshr &pRoot) {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val, TreeNode::Pshr &pRoot)
PtrTree::insertReal	ptr_tree.h	/^  void insertReal(TreeNode::TypeVal val, TreeNode::Pshr &pRoot);$/;"	p	class:PtrTree	access:private	signature:(TreeNode::TypeVal val, TreeNode::Pshr &pRoot)
PtrTree::max	ptr_tree.h	/^  TreeNode::Pshr max() const {$/;"	f	class:PtrTree	access:public	signature:() const
PtrTree::min	ptr_tree.h	/^  TreeNode::Pshr min() const {$/;"	f	class:PtrTree	access:public	signature:() const
PtrTree::pRoot	ptr_tree.h	/^  TreeNode::Pshr pRoot;$/;"	m	class:PtrTree	access:private
PtrTree::remove	ptr_tree.cpp	/^void PtrTree::remove(TreeNode::Pshr &pn) {$/;"	f	class:PtrTree	signature:(TreeNode::Pshr &pn)
PtrTree::remove	ptr_tree.h	/^  void remove(TreeNode::Pshr &pn);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::Pshr &pn)
PtrTree::search	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::search(TreeNode::TypeVal val) const {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val) const
PtrTree::search	ptr_tree.h	/^  TreeNode::Pshr search(TreeNode::TypeVal val) const;$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val) const
PtrTree::searchReal	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::searchReal(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const
PtrTree::searchReal	ptr_tree.h	/^  TreeNode::Pshr searchReal(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const
PtrTree::walkMidOrder	ptr_tree.cpp	/^void PtrTree::walkMidOrder() const {$/;"	f	class:PtrTree	signature:() const
PtrTree::walkMidOrder	ptr_tree.h	/^  void walkMidOrder() const;$/;"	p	class:PtrTree	access:public	signature:() const
PtrTree::walkMidOrderReal	ptr_tree.cpp	/^void PtrTree::walkMidOrderReal(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::walkMidOrderReal	ptr_tree.h	/^  void walkMidOrderReal(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
PtrTree::~PtrTree	ptr_tree.cpp	/^PtrTree::~PtrTree() {$/;"	f	class:PtrTree	signature:()
PtrTree::~PtrTree	ptr_tree.h	/^  ~PtrTree();$/;"	p	class:PtrTree	access:public	signature:()
TARGET	makefile	/^TARGET = ex12.3-1.out$/;"	m
TAR_OBJ	makefile	/^TAR_OBJ = ex12.3-1.o$/;"	m
TOOL_H	tool.h	2;"	d
TREE_FREE	array_tree.h	6;"	d
TREE_LEFT	array_tree.h	9;"	d
TREE_NODE_H	tree_node.h	2;"	d
TREE_PAR	array_tree.h	8;"	d
TREE_RIGHT	array_tree.h	10;"	d
TREE_SIZE	array_tree.h	4;"	d
TreeNode	tree_node.cpp	/^TreeNode::TreeNode(TypeVal val)$/;"	f	class:TreeNode	signature:(TypeVal val)
TreeNode	tree_node.cpp	/^TreeNode::TreeNode(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight) $/;"	f	class:TreeNode	signature:(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight)
TreeNode	tree_node.h	/^  TreeNode(TypeVal val);$/;"	p	class:TreeNode	access:public	signature:(TypeVal val)
TreeNode	tree_node.h	/^  TreeNode(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight);$/;"	p	class:TreeNode	access:public	signature:(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight)
TreeNode	tree_node.h	/^class TreeNode {$/;"	c
TreeNode::Pshr	tree_node.h	/^  typedef std::tr1::shared_ptr<TreeNode> Pshr;$/;"	t	class:TreeNode	access:public
TreeNode::TreeNode	tree_node.cpp	/^TreeNode::TreeNode(TypeVal val)$/;"	f	class:TreeNode	signature:(TypeVal val)
TreeNode::TreeNode	tree_node.cpp	/^TreeNode::TreeNode(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight) $/;"	f	class:TreeNode	signature:(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight)
TreeNode::TreeNode	tree_node.h	/^  TreeNode(TypeVal val);$/;"	p	class:TreeNode	access:public	signature:(TypeVal val)
TreeNode::TreeNode	tree_node.h	/^  TreeNode(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight);$/;"	p	class:TreeNode	access:public	signature:(TypeVal val, const Pshr &pPar, const Pshr &pLeft, const Pshr &pRight)
TreeNode::TypeVal	tree_node.h	/^  typedef int TypeVal;$/;"	t	class:TreeNode	access:public
TreeNode::getVal	tree_node.h	/^  TypeVal getVal() const {$/;"	f	class:TreeNode	access:public	signature:() const
TreeNode::pLeft	tree_node.h	/^  Pshr pLeft;$/;"	m	class:TreeNode	access:public
TreeNode::pPar	tree_node.h	/^  Pshr pPar;$/;"	m	class:TreeNode	access:public
TreeNode::pRight	tree_node.h	/^  Pshr pRight;$/;"	m	class:TreeNode	access:public
TreeNode::val	tree_node.h	/^  TypeVal val;$/;"	m	class:TreeNode	access:private
TreeNode::~TreeNode	tree_node.cpp	/^TreeNode::~TreeNode() {$/;"	f	class:TreeNode	signature:()
TreeNode::~TreeNode	tree_node.h	/^  ~TreeNode();$/;"	p	class:TreeNode	access:public	signature:()
TypeTreeVal	array_tree.h	/^typedef int TypeTreeVal;$/;"	t
TypeVal	tree_node.h	/^  typedef int TypeVal;$/;"	t	class:TreeNode	access:public
findMax	array_tree.c	/^int findMax(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
findMax	array_tree.h	/^int findMax(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
findMax	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::findMax(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
findMax	ptr_tree.h	/^  TreeNode::Pshr findMax(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
findMin	array_tree.c	/^int findMin(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
findMin	array_tree.h	/^int findMin(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
findMin	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::findMin(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
findMin	ptr_tree.h	/^  TreeNode::Pshr findMin(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
findMostLeft	array_tree.c	/^int findMostLeft(ArrayTree *pt) {$/;"	f	signature:(ArrayTree *pt)
findMostLeft	array_tree.h	/^int findMostLeft(ArrayTree *pt);$/;"	p	signature:(ArrayTree *pt)
findMostRight	array_tree.c	/^int findMostRight(ArrayTree *pt) {$/;"	f	signature:(ArrayTree *pt)
findMostRight	array_tree.h	/^int findMostRight(ArrayTree *pt);$/;"	p	signature:(ArrayTree *pt)
findPost	array_tree.c	/^int findPost(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
findPost	array_tree.h	/^int findPost(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
findPre	array_tree.c	/^int findPre(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
findPre	array_tree.h	/^int findPre(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
getVal	tree_node.h	/^  TypeVal getVal() const {$/;"	f	class:TreeNode	access:public	signature:() const
insert	ptr_tree.cpp	/^void PtrTree::insert(TreeNode::TypeVal val) {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val)
insert	ptr_tree.h	/^  void insert(TreeNode::TypeVal val);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val)
insertReal	ptr_tree.cpp	/^void PtrTree::insertReal(TreeNode::TypeVal val, TreeNode::Pshr &pRoot) {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val, TreeNode::Pshr &pRoot)
insertReal	ptr_tree.h	/^  void insertReal(TreeNode::TypeVal val, TreeNode::Pshr &pRoot);$/;"	p	class:PtrTree	access:private	signature:(TreeNode::TypeVal val, TreeNode::Pshr &pRoot)
isValid	array_tree.c	/^int isValid(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
isValid	array_tree.h	/^int isValid(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
main	ex12.1-3.c	/^main() {$/;"	f
main	ex12.2-3.c	/^main() {$/;"	f
main	ex12.3-1.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
max	ptr_tree.h	/^  TreeNode::Pshr max() const {$/;"	f	class:PtrTree	access:public	signature:() const
min	ptr_tree.h	/^  TreeNode::Pshr min() const {$/;"	f	class:PtrTree	access:public	signature:() const
pLeft	tree_node.h	/^  Pshr pLeft;$/;"	m	class:TreeNode	access:public
pPar	tree_node.h	/^  Pshr pPar;$/;"	m	class:TreeNode	access:public
pRight	tree_node.h	/^  Pshr pRight;$/;"	m	class:TreeNode	access:public
pRoot	ptr_tree.h	/^  TreeNode::Pshr pRoot;$/;"	m	class:PtrTree	access:private
remove	ptr_tree.cpp	/^void PtrTree::remove(TreeNode::Pshr &pn) {$/;"	f	class:PtrTree	signature:(TreeNode::Pshr &pn)
remove	ptr_tree.h	/^  void remove(TreeNode::Pshr &pn);$/;"	p	class:PtrTree	access:public	signature:(TreeNode::Pshr &pn)
search	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::search(TreeNode::TypeVal val) const {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val) const
search	ptr_tree.h	/^  TreeNode::Pshr search(TreeNode::TypeVal val) const;$/;"	p	class:PtrTree	access:public	signature:(TreeNode::TypeVal val) const
searchReal	ptr_tree.cpp	/^TreeNode::Pshr PtrTree::searchReal(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const
searchReal	ptr_tree.h	/^  TreeNode::Pshr searchReal(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(TreeNode::TypeVal val, const TreeNode::Pshr &pRoot) const
swap	tool.c	/^void swap(int *a, int *b) {$/;"	f	signature:(int *a, int *b)
swap	tool.h	/^void swap(int *a, int *b);$/;"	p	signature:(int *a, int *b)
tree	array_tree.h	/^  TypeTreeVal tree[TREE_SIZE];$/;"	m	struct:ArrayTree	access:public
treeDelete	array_tree.c	/^void treeDelete(ArrayTree *pt, int pos) {$/;"	f	signature:(ArrayTree *pt, int pos)
treeDelete	array_tree.h	/^void treeDelete(ArrayTree *pt, int pos);$/;"	p	signature:(ArrayTree *pt, int pos)
treeFactory	array_tree.c	/^ArrayTree *treeFactory() {$/;"	f
treeFactory	array_tree.h	/^ArrayTree *treeFactory();$/;"	p	signature:()
treeInsert	array_tree.c	/^void treeInsert(ArrayTree *pt, TypeTreeVal val, int pos) {$/;"	f	signature:(ArrayTree *pt, TypeTreeVal val, int pos)
treeInsert	array_tree.h	/^void treeInsert(ArrayTree *pt, TypeTreeVal val, int pos);$/;"	p	signature:(ArrayTree *pt, TypeTreeVal val, int pos)
treeSearch	array_tree.c	/^int treeSearch(ArrayTree *pt, TypeTreeVal val) {$/;"	f	signature:(ArrayTree *pt, TypeTreeVal val)
treeSearch	array_tree.h	/^int treeSearch(ArrayTree *pt, TypeTreeVal val);$/;"	p	signature:(ArrayTree *pt, TypeTreeVal val)
val	tree_node.h	/^  TypeVal val;$/;"	m	class:TreeNode	access:private
valid	array_tree.h	/^  char valid[TREE_SIZE];$/;"	m	struct:ArrayTree	access:public
walkMidOrder	ptr_tree.cpp	/^void PtrTree::walkMidOrder() const {$/;"	f	class:PtrTree	signature:() const
walkMidOrder	ptr_tree.h	/^  void walkMidOrder() const;$/;"	p	class:PtrTree	access:public	signature:() const
walkMidOrderReal	ptr_tree.cpp	/^void PtrTree::walkMidOrderReal(const TreeNode::Pshr &pRoot) const {$/;"	f	class:PtrTree	signature:(const TreeNode::Pshr &pRoot) const
walkMidOrderReal	ptr_tree.h	/^  void walkMidOrderReal(const TreeNode::Pshr &pRoot) const;$/;"	p	class:PtrTree	access:private	signature:(const TreeNode::Pshr &pRoot) const
walkNonRecur	array_tree.c	/^void walkNonRecur(ArrayTree *pt) {$/;"	f	signature:(ArrayTree *pt)
walkNonRecur	array_tree.h	/^void walkNonRecur(ArrayTree *pt);$/;"	p	signature:(ArrayTree *pt)
~PtrTree	ptr_tree.cpp	/^PtrTree::~PtrTree() {$/;"	f	class:PtrTree	signature:()
~PtrTree	ptr_tree.h	/^  ~PtrTree();$/;"	p	class:PtrTree	access:public	signature:()
~TreeNode	tree_node.cpp	/^TreeNode::~TreeNode() {$/;"	f	class:TreeNode	signature:()
~TreeNode	tree_node.h	/^  ~TreeNode();$/;"	p	class:TreeNode	access:public	signature:()
